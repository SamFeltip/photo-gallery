---
import { Image } from "astro:assets";
import BaseLayout from "~/layouts/BaseLayout.astro";
import "@fancyapps/ui/dist/fancybox/fancybox.css";
import fs from "fs";
import path from "path";

const { slug } = Astro.params;

export async function getStaticPaths() {
  const imagesDirPath = import.meta.env.PROD
    ? import.meta.env.IMAGES_DIR_PROD
    : import.meta.env.IMAGES_DIR_DEV;

  const imagesDir = new URL(imagesDirPath, import.meta.url).pathname;

  // Read all folders in /src/images
  const slugs = fs
    .readdirSync(imagesDir, { withFileTypes: true })
    .filter((entry) => entry.isDirectory())
    .map((dir) => dir.name);

  return slugs.map((slug) => ({
    params: { slug },
    props: { slug },
  }));
}

const images = import.meta.glob<{ default: ImageMetadata }>(
  "../images/**/*.{jpg,jpeg,png,webp}",
);

function getImagesForSlug(slug: string) {
  const matching = Object.entries(images).filter(([path]) =>
    path.includes(`/images/${slug}/`),
  );

  return Promise.all(
    matching.map(async ([_path, image]) => {
      const { default: imageData } = await image();
      return imageData;
    }),
  );
}

if (slug === undefined) {
  throw new Error("Slug is undefined");
}

const slugImages = await getImagesForSlug(slug);
---

<BaseLayout
  title="Astro Photo Grid"
  description="A minimal, single-page photo gallery for Astro."
>
  <section class="justified-gallery" id="photoswipe">
    {
      slugImages.map((imageData, index) => (
        <a
          style={`--width: ${imageData.width}; --height: ${imageData.height};`}
          href={imageData.src}
          target="_blank"
          data-fancybox="gallery"
        >
          <Image
            format="webp"
            src={imageData}
            alt=""
            height={400}
            loading={index < 20 ? "eager" : "lazy"}
          />
        </a>
      ))
    }
  </section>
</BaseLayout>

<script>
  import { Fancybox } from "@fancyapps/ui/dist/fancybox/";

  Fancybox.bind("[data-fancybox]", {
    theme: "auto",
    mainStyle: {
      "--f-button-width": "44px",
      "--f-button-height": "44px",
      "--f-button-border-radius": "50%",
      "--f-toolbar-padding": "16px",
    },
    Carousel: {
      Arrows: false,
      Toolbar: {
        display: {
          left: [],
          middle: [],
          right: ["close"],
        },
      },
      transition: "slide",
    },
  });
</script>

<style>
  .justified-gallery {
    --padding: max(2.5vw, 12px);
    --space: max(2.5vw, 12px);
    --min-height: clamp(200px, 20vw, 400px);

    padding: var(--padding);
    display: flex;
    flex-wrap: wrap;
    gap: var(--space);

    a {
      flex-grow: calc(var(--width) * (100000 / var(--height)));
      flex-basis: calc(var(--min-height) * (var(--width) / var(--height)));
      aspect-ratio: var(--width) / var(--height);
      overflow: hidden;
      opacity: 1;
      transition: all 0.05s ease-in-out;
    }

    a img {
      display: block;
      object-fit: cover;
      height: 100%;
      width: 100%;
    }

    a:focus-visible {
      outline: 3px solid var(--outline);
      outline-offset: 2px;
      transform: scale(1.05);
      z-index: 1;
      border-radius: 2px;
      box-shadow: 0 2px 4px 2px rgba(0, 0, 0, 0.1);
    }

    a.hidden {
      transition: opacity 0.4s ease-in-out;
      opacity: 0;
    }

    &::after {
      content: " ";
      flex-grow: 1000000000;
    }
  }
</style>
